// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Flow {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String @db.ObjectId

    @@index([name])
    @@index([createdById])
}

model Video {
    id                  String         @id @default(auto()) @map("_id") @db.ObjectId
    videoId             String         @unique
    channelId           String
    channelTitle        String
    contentDetails      Json
    description         String
    ingestedAt          DateTime       @default(now())
    publishedAt         DateTime
    thumbnails          Thumbnails
    title               String
    updatedAt           DateTime       @updatedAt
    videoOwnerChannelId String
    isShortVideo        Boolean?
    metadata            Metadata?
    // transcript                String?
    transcription       Transcription? // Embed the transcription field directly in the Video model

    transcriptChapters        TranscriptChapter[]
    transcriptSegments        Json?
    stringMatchesSentences    Json?
    // sentences                 String[]
    topics                    Json?
    topics_stats              Json?
    topicsSummary             Json?
    transcriptChaptersSummary Json?
    paragraphs                Json?
    sentenceEntities          Json?
    sentenceEntities2         Json?

    channel     VideoChannel  @relation(fields: [channelId], references: [channelId])
    videoAccess VideoAccess[]

    // @@index([videoId])
    @@index([channelId])
    @@index([isShortVideo])
}

model VideoAccess {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    videoId   String
    userId    String
    isFirst   Boolean
    createdAt DateTime
    updatedAt DateTime @updatedAt
    video     Video    @relation(fields: [videoId], references: [videoId])
}

type Transcription {
    numSpeakers Int?
    language    String?
    segments    Segment[] // Array of embedded segments
    sentences   Sentence[] // Array of embedded sentences
}

// Embedded structure for Segments
type Segment {
    start   Float
    end     Float
    speaker String
    text    String
    words   Word[] // Array of embedded words
}

// Embedded structure for Sentences
type Sentence {
    start   Float
    end     Float
    speaker String
    text    String
    words   Word[] // Array of embedded words
}

// Embedded structure for Words (used in both Segments and Sentences)
type Word {
    start       Float
    end         Float
    word        String
    probability Float?
    speaker     String
}

// model Video {
//     id                         String                      @id @default(auto()) @map("_id") @db.ObjectId
//     videoId                    String
//     channelId                  String
//     channelTitle               String
//     contentDetails             ContentDetails
//     description                String
//     ingestedAt                 DateTime                    @default(now())
//     publishedAt                DateTime
//     thumbnails                 Thumbnails
//     thumbnailsId               String
//     title                      String
//     updatedAt                  DateTime                    @updatedAt
//     videoOwnerChannelId        String
//     isShortVideo               Boolean
//     metadata                   Metadata
//     transcript                 String
//     transcriptChapters         TranscriptChapter[]
//     transcriptSegments         TranscriptSegment[]
//     transcriptChaptersCombined TranscriptChapterCombined[]
//     stringMatchesSentences     String[]
//     stringMatchesTranscript    String[]
//     sentences                  String[]
//     topics                     Json
//     topics_stats               Json
//     paragraphs                 Paragraphs
//     sentenceEntities           SentenceEntities[]

//     @@index([videoId])
// }

type ContentDetails {
    duration        String
    dimension       String
    definition      String
    caption         Boolean
    licensedContent Boolean
    contentRating   Json
    projection      String
}

type Thumbnails {
    default  Thumbnail
    medium   Thumbnail
    high     Thumbnail
    standard Thumbnail?
    maxres   Thumbnail?
}

type Thumbnail {
    url    String
    width  Int
    height Int
}

type Metadata {
    duration               Int
    view_count             Int
    categories             String[]
    tags                   String[]
    like_count             Int?
    channel_follower_count Int?
    comment_count          Int?
}

type TranscriptChapter {
    start_time Int
    title      String
    end_time   Int
    // text       String
}

type TranscriptSegment {
    start Float
    end   Float
    t     String
    text  String
}

type TranscriptChapterCombined {
    title      String
    start_time Int
    end_time   Int
    text       String
}

type Paragraphs {
    bert     String[]
    bgeSmall String[]
    gteSmall String[]
}

type SentenceEntities {
    index    Int
    entities Entity[]
}

type Entity {
    start            Int
    end              Int
    text             String
    label            String
    score            Float
    SentenceEntities SentenceEntities
}

// ---- Video Channel

model VideoChannel {
    id         String     @id @default(auto()) @map("_id") @db.ObjectId
    channelId  String     @unique
    etag       String?
    ingestedAt DateTime   @default(now())
    kind       String?
    snippet    Snippet
    statistics Statistics
    updatedAt  DateTime   @updatedAt

    videos Video[]
}

type Snippet {
    title       String
    description String?
    customUrl   String?
    publishedAt DateTime
    thumbnails  Thumbnails?
    localized   Localized?
    country     String?
}

type Localized {
    title       String
    description String?
}

type Statistics {
    viewCount             Int
    subscriberCount       Int
    hiddenSubscriberCount Boolean
    videoCount            Int
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    createdAt     DateTime  @default(now()) @map(name: "created_at")
    updatedAt     DateTime  @updatedAt @map(name: "updated_at")
    openAIKey     String?
    useGPT4       Boolean?  @default(true)
    accounts      Account[]
    sessions      Session[]
    flows         Flow[]
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//     provider = "prisma-client-js"
// }

// datasource db {
//     provider = "sqlite"
//     // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
//     // Further reading:
//     // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
//     // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
//     url      = env("DATABASE_URL")
// }

// model Post {
//     id        Int      @id @default(autoincrement())
//     name      String
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     createdBy   User   @relation(fields: [createdById], references: [id])
//     createdById String

//     @@index([name])
// }

// // Necessary for Next auth
// model Account {
//     id                       String  @id @default(cuid())
//     userId                   String
//     type                     String
//     provider                 String
//     providerAccountId        String
//     refresh_token            String? // @db.Text
//     access_token             String? // @db.Text
//     expires_at               Int?
//     token_type               String?
//     scope                    String?
//     id_token                 String? // @db.Text
//     session_state            String?
//     user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
//     refresh_token_expires_in Int?

//     @@unique([provider, providerAccountId])
// }

// model Session {
//     id           String   @id @default(cuid())
//     sessionToken String   @unique
//     userId       String
//     expires      DateTime
//     user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model User {
//     id            String    @id @default(cuid())
//     name          String?
//     email         String?   @unique
//     emailVerified DateTime?
//     image         String?
//     accounts      Account[]
//     sessions      Session[]
//     posts         Post[]
// }

// model VerificationToken {
//     identifier String
//     token      String   @unique
//     expires    DateTime

//     @@unique([identifier, token])
// }

model KnowledgeGraph {
    id                String             @id @default(auto()) @map("_id") @db.ObjectId
    edgeId            String
    channelId         String
    channelTitle      String
    relation          String
    sourceId          String
    targetId          String
    source            KnowledgeGraphNode
    target            KnowledgeGraphNode
    videoId           String
    videoMetaData     VideoMetaData
    videoPublishedAt  DateTime
    videoThumbnailsId String?
    videoThumbnails   VideoThumbnails[]
}

type KnowledgeGraphNode {
    nodeId       String
    name         String
    type         String
    videoId      String
    chapterTitle String
}

type VideoMetaData {
    duration               Int
    view_count             Int
    categories             String[]
    tags                   String[]
    like_count             Int? // Optional as it might be null
    channel_follower_count Int
    comment_count          Int
}

type VideoThumbnails {
    default  Thumbnail
    medium   Thumbnail
    high     Thumbnail
    standard Thumbnail
    maxres   Thumbnail
}
